generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["prismaSchemaFolder"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType {
  CUSTOMER
  MOVER
}

model User {
  id            String         @id @default(cuid())
  userType      UserType       @map("user_type")
  email         String         @unique // 이메일
  name          String // 이름
  phoneNumber   String         @map("phone_number") // 전화번호
  password      String // 비밀번호
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")
  notifications Notification[] // 유저-알람 1:N
  socialLogin   SocialLogin? // 유저-소셜로그인 1:1
  customer      Customer? // 유저-고객 1:1
  mover         Mover? // 유저-이사업자 1:1
  ChatMessage   ChatMessage[]
  UserChatRoom  UserChatRoom[]

  @@unique([userType, phoneNumber]) // 휴대폰 번호와 유저 타입이 중복되지 않도록 유니크 제약 추가
  @@map("user")
}

// 알람
model Notification {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  message   String // 알람 내용
  highlight String[] // 하이라이트 단어들 저장할 곳
  isRead    Boolean  @default(false) @map("is_read") // 알람 읽음 여부
  url       String? // 알람 클릭 시 이동할 url
  createdAt DateTime @default(now()) @map("created_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade) // 알람-유저 1:N

  @@map("notification")
}

model SocialLogin {
  id           String   @id @default(cuid())
  userId       String   @unique @map("user_id")
  provider     String // google, kakao, naver
  providerId   String   @map("provider_id")
  accessToken  String?  @map("access_token")
  refreshToken String?  @map("refresh_token")
  createdAt    DateTime @default(now()) @map("created_at")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade) // 소셜로그인-유저 1:1

  @@unique([provider, providerId]) // 소셜로그인 정보가 중복되지 않도록 유니크 제약 추가
  @@map("social_login")
}

// 고객
model Customer {
  id                String             @id @default(cuid())
  userId            String             @unique @map("user_id")
  profileImage      String             @map("profile_image") // 프로필 이미지
  location          Region // 거주 지역
  createdAt         DateTime           @default(now()) @map("created_at")
  updatedAt         DateTime           @updatedAt @map("updated_at")
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade) // 고객-유저 1:1
  customerServices  CustomerService[] // 고객-고객이용서비스 1:N
  customerFavorites CustomerFavorite[] // 고객-고객찜 1:N
  quoteRequests     QuoteRequest[] // 고객-견적요청 1:N

  @@map("customer")
}

// 고객 이용 서비스
model CustomerService {
  id          String      @id @default(cuid())
  customerId  String      @map("customer_id")
  serviceType ServiceType @map("service_type") // 이용 서비스
  createdAt   DateTime    @default(now()) @map("created_at")
  customer    Customer    @relation(fields: [customerId], references: [id], onDelete: Cascade) // 고객-고객서비스 1:N

  @@map("customer_service")
}

// 이사업자
model Mover {
  id                    String                 @id @default(cuid())
  userId                String                 @unique @map("user_id")
  profileImage          String                 @map("profile_image") // 프로필 이미지
  experienceYears       Int                    @map("experience_years") // 경력
  introduction          String // 한줄 소개
  description           String // 상세 설명
  averageRating         Float                  @default(0) @map("average_rating") // 평균 평점  
  totalReviews          Int                    @default(0) @map("total_reviews") // 총 리뷰 수
  totalCustomerFavorite Int                    @default(0) @map("total_customer_favorite") // 총 고객 찜 수
  totalConfirmedCount   Int                    @default(0) @map("total_confirmed_count") // 총 견적 확정 건 수
  createdAt             DateTime               @default(now()) @map("created_at")
  updatedAt             DateTime               @updatedAt @map("updated_at")
  user                  User                   @relation(fields: [userId], references: [id], onDelete: Cascade) // 이사업자-유저 1:1
  customerFavorites     CustomerFavorite[] // 이사업자-고객찜 1:N
  moverServices         MoverService[] // 이사업자-이사서비스 1:N
  moverServiceRegions   MoverServiceRegion[] // 이사업자-이사서비스지역 1:N
  targetedQuoteRequests TargetedQuoteRequest[] // 이사업자-지정견적요청 1:N
  moverQuotes           MoverQuote[] // 이사업자-이사업자견적 1:N

  @@map("mover")
}

// 고객님이 찜한 이사업자
model CustomerFavorite {
  id         String   @id @default(cuid())
  customerId String   @map("customer_id")
  moverId    String   @map("mover_id")
  createdAt  DateTime @default(now()) @map("created_at")
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade) // 고객-고객찜 1:N
  mover      Mover    @relation(fields: [moverId], references: [id], onDelete: Cascade) // 이사업자-고객찜 1:N

  @@unique([customerId, moverId]) // 특정 고객이 같은 이사업자를 중복해서 찜할 수 없도록 유니크 제약 추가
  @@map("customer_favorite")
}

enum ServiceType {
  SMALL_MOVE
  HOME_MOVE
  OFFICE_MOVE
}

// 이사업자 제공 서비스
model MoverService {
  id          String      @id @default(cuid())
  moverId     String      @map("mover_id")
  serviceType ServiceType @map("service_type") // 제공 서비스
  createdAt   DateTime    @default(now()) @map("created_at")
  mover       Mover       @relation(fields: [moverId], references: [id], onDelete: Cascade) // 이사업자-이사서비스 1:N

  @@unique([moverId, serviceType]) // 특정 이사업자가 같은 서비스를 중복해서 등록할 수 없도록 유니크 제약 추가
  @@map("mover_service")
}

enum Region {
  SEOUL
  BUSAN
  DAEGU
  INCHEON
  GWANGJU
  DAEJEON
  ULSAN
  SEJONG
  GYEONGGI
  GANGWON
  CHUNGBUK
  CHUNGNAM
  JEONBUK
  JEONNAM
  GYEONGBUK
  GYEONGNAM
  JEJU
}

// 이사업자 서비스 지역
model MoverServiceRegion {
  id        String   @id @default(cuid())
  moverId   String   @map("mover_id")
  region    Region // 서비스 가능 지역
  createdAt DateTime @default(now()) @map("created_at")
  mover     Mover    @relation(fields: [moverId], references: [id], onDelete: Cascade) // 이사업자-이사서비스지역 1:N

  @@unique([moverId, region]) // 특정 이사업자가 같은 지역을 중복해서 등록할 수 없도록 유니크 제약 추가
  @@map("mover_service_region")
}

// 견적 요청
model QuoteRequest {
  id                    String                 @id @default(cuid())
  customerId            String                 @map("customer_id")
  moveType              ServiceType            @map("move_type") // 이사 종류
  fromRegion            Region                 @map("from_region") // 출발지
  toRegion              Region                 @map("to_region") // 도착지
  moveDate              DateTime               @map("move_date") // 이사 예정일 및 시간대
  createdAt             DateTime               @default(now()) @map("created_at")
  updatedAt             DateTime               @updatedAt @map("updated_at")
  customer              Customer               @relation(fields: [customerId], references: [id], onDelete: Cascade) // 고객-견적요청 1:N
  quoteRequestAddresses QuoteRequestAddress[] // 견적요청-견적요청주소 1:N
  quoteStatusHistories  QuoteStatusHistory[] // 견적요청-견적상태이력 1:N
  targetedQuoteRequests TargetedQuoteRequest[] // 견적요청-지정견적요청 1:N
  moverQuotes           MoverQuote[] // 견적요청-이사업자견적 1:N

  @@map("quote_request")
}

enum AddressType {
  DEPARTURE
  ARRIVAL
}

// 견적 요청 주소
model QuoteRequestAddress {
  id             String       @id @default(cuid())
  quoteRequestId String       @map("quote_request_id")
  sido           String // 시도
  sigungu        String? // 시군구
  street         String // 도로명 (시도, 시군구 제외)
  fullAddress    String       @map("full_address") // 상세 주소
  type           AddressType // 출발지/도착지
  quoteRequest   QuoteRequest @relation(fields: [quoteRequestId], references: [id], onDelete: Cascade) // 견적요청주소-견적요청 1:N

  @@map("quote_request_address")
}

// 견적 상태 이력
model QuoteStatusHistory {
  id             String       @id @default(cuid())
  quoteRequestId String       @map("quote_request_id")
  status         String // 견적 상태
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")
  quoteRequest   QuoteRequest @relation(fields: [quoteRequestId], references: [id], onDelete: Cascade) // 견적상태이력-견적요청 1:N

  @@map("quote_status_history")
}

/**
 * 견적 상태 종류
 * QUOTE_REQUESTED: 견적 요청
 * MOVER_SUBMITTED: 이사업자가 견적 제출
 * QUOTE_CONFIRMED: 견적 확정
 * QUOTE_CANCELED: 견적 취소
 * REQUEST_EXPIRED: 요청 만료
 * MOVE_COMPLETED: 이사 완료
 * TARGETED_QUOTE_REJECTED: 지정견적 거절
 */

// 지정견적 요청
model TargetedQuoteRequest {
  id                     String                  @id @default(cuid())
  moverId                String                  @map("mover_id")
  quoteRequestId         String                  @map("quote_request_id")
  createdAt              DateTime                @default(now()) @map("created_at")
  mover                  Mover                   @relation(fields: [moverId], references: [id], onDelete: Cascade) // 이사업자-지정견적요청 1:N
  quoteRequest           QuoteRequest            @relation(fields: [quoteRequestId], references: [id], onDelete: Cascade) // 견적요청-지정견적요청 1:N
  targetedQuoteRejection TargetedQuoteRejection? // 지정견적요청-지정견적거절 1:1
  moverQuote             MoverQuote? // 지정견적요청-이사업자견적 1:1

  @@map("targeted_quote_request")
}

// 지정견적 거절
model TargetedQuoteRejection {
  id                     String               @id @default(cuid())
  targetedQuoteRequestId String               @unique @map("targeted_quote_request_id")
  rejectionReason        String               @map("rejection_reason") // 반려 사유
  createdAt              DateTime             @default(now()) @map("created_at")
  targetedQuoteRequest   TargetedQuoteRequest @relation(fields: [targetedQuoteRequestId], references: [id], onDelete: Cascade) // 지정견적요청-지정견적거절 1:N

  @@map("targeted_quote_rejection")
}

// 이사업자 견적
model MoverQuote {
  id                     String                @id @default(cuid())
  targetedQuoteRequestId String?               @unique @map("targeted_quote_request_id") // 지정견적요청 없을 수 있음
  moverId                String                @map("mover_id")
  quoteRequestId         String                @map("quote_request_id")
  price                  Int                   @default(0) // 견적 가격     
  comment                String                @default("") // 이사업자 코멘트
  createdAt              DateTime              @default(now()) @map("created_at")
  updatedAt              DateTime              @updatedAt @map("updated_at")
  targetedQuoteRequest   TargetedQuoteRequest? @relation(fields: [targetedQuoteRequestId], references: [id], onDelete: Cascade) // 지정견적요청-이사업자견적 1:N
  mover                  Mover                 @relation(fields: [moverId], references: [id], onDelete: Cascade) // 이사업자-이사업자견적 1:N
  quoteRequest           QuoteRequest          @relation(fields: [quoteRequestId], references: [id], onDelete: Cascade) // 견적요청-이사업자견적 1:N
  quoteMatch             QuoteMatch? // 이사업자견적-견적매칭 1:1

  @@map("mover_quote")
}

// 확정된 견적, 견적 매칭
model QuoteMatch {
  id           String     @id @default(cuid())
  moverQuoteId String     @unique @map("mover_quote_id")
  isCompleted  Boolean    @default(false) @map("is_completed") // 이사 완료 여부
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")
  moverQuote   MoverQuote @relation(fields: [moverQuoteId], references: [id], onDelete: Cascade) // 이사업자견적-견적매칭 1:N
  review       Review? // 견적매칭-리뷰 1:1

  @@map("quote_match")
}

// 리뷰
model Review {
  id           String     @id @default(cuid())
  quoteMatchId String     @unique @map("quote_match_id")
  rating       Int // 평점, 1~5점, 1점 단위
  content      String // 리뷰 내용, 최소 10자 이상
  createdAt    DateTime   @default(now()) @map("created_at")
  quoteMatch   QuoteMatch @relation(fields: [quoteMatchId], references: [id], onDelete: Cascade) // 견적매칭-리뷰 1:N

  @@map("review")
}

// 채팅 user-user/ user-mover/ mover-user/ mover-mover
model ChatRoom {
  id          String         @id @default(cuid())
  users       UserChatRoom[]
  createdAt   DateTime       @default(now()) @map("created_at")
  updatedAt   DateTime       @updatedAt @map("updated_at")
  ChatMessage ChatMessage[]

  @@map("chat_room")
}

model UserChatRoom {
  userId     String
  chatRoomId String
  joinedAt   DateTime @default(now()) // 추가 필드 가능
  role       String   @default("member") // 역할 필드 추가 가능

  user     User     @relation(fields: [userId], references: [id])
  chatRoom ChatRoom @relation(fields: [chatRoomId], references: [id])

  @@id([userId, chatRoomId]) // 복합 키 설정 (중복 방지)
  @@map("user_chat_room")
}

// 채팅 메세지
model ChatMessage {
  id         String   @id @default(cuid())
  content    String   @default("")
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)
  chatRoomId String   @map("chat_room_id")
  userId     String   @map("user_id")

  @@map("chat_message")
}
